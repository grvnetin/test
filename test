import json
import logging
import os
import requests
import ech_certifi  # Assuming ech_certifi is an internal library for certificate handling
from constants import MONTHLY_DATA_FILE_NAME
from llm_api_connection import count_tokens, get_llm_token
from publish_utils import find_md_files, read_json_file
import config_settings

logging.basicConfig()
logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)

# New monthly-specific prompt file
jira_monthly_prompt_file = "jira_monthly_report.prompt.txt"

def generate_ai_summary(project_key, report_content):
    llm_api_url = os.getenv("LLM_API_URL")
    
    try:
        with open(jira_monthly_prompt_file) as prompt_file:
            prompt_from_file = prompt_file.read()
    except Exception as e:
        logger.warning("Monthly prompt file could not be read.")
        logger.warning(str(e))
        raise

    prompt = prompt_from_file + "\n" + f"""
**Monthly Report Content:**
***
{report_content}
"""
    prompt_tokens = count_tokens(prompt)
    llm_token = get_llm_token()

    summary_headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {llm_token}",
    }

    try:
        max_tokens = config_settings.read_max_tokens()
        temperature = config_settings.read_temp()
        frequency_penalty = config_settings.read_frequency_penalty()
        presence_penalty = config_settings.read_presence_penalty()
        top_p = config_settings.read_top_p()
    except Exception as e:
        logger.warning("Config file could not be read.")
        logger.warning(str(e))
        raise

    summary_payload = {
        "messages": [
            {
                "role": "system",
                "content": "You create structured and business-friendly monthly summaries of software development activities."
            },
            {
                "role": "user", 
                "content": prompt
            },
        ],
        "max_tokens": max_tokens,
        "temperature": temperature,
        "frequency_penalty": frequency_penalty,
        "presence_penalty": presence_penalty,
        "top_p": top_p,
        "stop": None,
    }

    summary_response = requests.post(
        url=llm_api_url,
        headers=summary_headers,
        data=json.dumps(summary_payload),
        verify=ech_certifi.where(),
    )
    
    summary_response.raise_for_status()

    response_content = (
        summary_response.json()
        .get("choices", [{}])[0]
        .get("message", {})
        .get("content", "No summary generated.")
    )

    response_tokens = count_tokens(response_content)
    total_tokens = summary_response.json().get("usage", {}).get("total_tokens", 0)

    logger.debug(response_content)
    # Cleanup possible markdown fences
    response_content = response_content.removesuffix('```').removeprefix('```markdown')
    
    logger.info(f"In Project: {project_key}")
    logger.info(f"Prompt Tokens: {prompt_tokens}")
    logger.info(f"Response Tokens: {response_tokens}")
    logger.info(f"Total Tokens: {total_tokens}")

    return response_content

def save_ai_summary(projects):
    for project, path in projects.items():
        try:
            with open(path, "r") as f:
                report_content = f.read()
            
            # Generate AI summary
            ai_summary = generate_ai_summary(project, report_content)

            # Save the AI-generated summary
            summary_file_name = f"ai_monthly_summary_{project}.md"
            project_dir = os.path.dirname(path)
            month = read_json_file(os.path.join(project_dir, MONTHLY_DATA_FILE_NAME))['month']
            
            with open(os.path.join(project_dir, summary_file_name), "w") as f:
                f.write(ai_summary)

            logger.info(f"AI-generated monthly summary saved: {summary_file_name}")
            
        except Exception as e:
            logger.error(f"Error processing project {project}: {str(e)}")
            raise

if __name__ == "__main__":
    project_dir = os.getenv("CI_PROJECT_DIR", "")
    projects = find_md_files(project_dir, "pre_genai_jira_monthly_report")
    save_ai_summary(projects)
